# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
- name: copy the private key
  copy: 
    dest: /root/.ssh/id_rsa
    mode: '0600'
    content: "{{ssh_privkey_b64 | b64decode }}"

- file: path=/root/.ssh/known_hosts state=absent

- name: wait for ssh ready
  command: >
    ssh  -o StrictHostKeyChecking=no  -o ServerAliveInterval=300 -o ServerAliveCountMax=2 
    root@{{item}} true 
  retries: 5
  delay: 5
  register: result
  until: result.rc == 0
  loop: "{{groups['nodes']}}"

- name: check for cloud-init completed
  command: >
    ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=300 -o ServerAliveCountMax=2
    root@{{item}} cloud-init status --wait
  async: 1000
  poll: 0
  loop: "{{groups['nodes']}}"
  register: async_results

- name: wait for cloud-init completed
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 1000

- name: check for microk8s to be ready
  command: >
    ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=300 -o ServerAliveCountMax=2
    root@{{item}} microk8s status --wait-ready
  async: 1000
  poll: 0
  loop: "{{groups['nodes']}}"
  register: async_results

- name: wait for microk8s completed
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 1000

- name: extract kubeconfig
  shell: >
      ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=300 -o ServerAliveCountMax=2
      root@{{kube_master}} microk8s config 
      | sed -e 's/{{kube_master}}:{{kube_port}}/{{inventory_hostname}}:6443/g'
      >/etc/kubeconfig

- name: save locally the config
  fetch:
    src: /etc/kubeconfig
    dest: "{{kube_config}}"
    flat: yes
